/*
 * generated by Xtext 2.20.0
 */
package de.tubs.isf.guido.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.tubs.isf.guido.dsl.ide.contentassist.antlr.internal.InternalDslParser;
import de.tubs.isf.guido.dsl.services.DslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
			builder.put(grammarAccess.getHypothesisAccess().getGroup(), "rule__Hypothesis__Group__0");
			builder.put(grammarAccess.getHypothesisAccess().getGroup_2(), "rule__Hypothesis__Group_2__0");
			builder.put(grammarAccess.getHypothesisAccess().getGroup_2_2(), "rule__Hypothesis__Group_2_2__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getDatabasesAccess().getGroup(), "rule__Databases__Group__0");
			builder.put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
			builder.put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_4(), "rule__Definition__Group_4__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_8(), "rule__Definition__Group_8__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_8_3(), "rule__Definition__Group_8_3__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_0(), "rule__Property__Group_0__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_1(), "rule__Property__Group_1__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_2(), "rule__Property__Group_2__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_3(), "rule__Property__Group_3__0");
			builder.put(grammarAccess.getConstructsAccess().getGroup(), "rule__Constructs__Group__0");
			builder.put(grammarAccess.getConstructsAccess().getGroup_4(), "rule__Constructs__Group_4__0");
			builder.put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getDslAccess().getElementsAssignment(), "rule__Dsl__ElementsAssignment");
			builder.put(grammarAccess.getHypothesisAccess().getNameAssignment_1(), "rule__Hypothesis__NameAssignment_1");
			builder.put(grammarAccess.getHypothesisAccess().getTypesAssignment_2_1(), "rule__Hypothesis__TypesAssignment_2_1");
			builder.put(grammarAccess.getHypothesisAccess().getTypesAssignment_2_2_1(), "rule__Hypothesis__TypesAssignment_2_2_1");
			builder.put(grammarAccess.getHypothesisAccess().getDescriptionAssignment_4(), "rule__Hypothesis__DescriptionAssignment_4");
			builder.put(grammarAccess.getHypothesisAccess().getDefinitionAssignment_5(), "rule__Hypothesis__DefinitionAssignment_5");
			builder.put(grammarAccess.getHypothesisAccess().getConstructsAssignment_6(), "rule__Hypothesis__ConstructsAssignment_6");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getDatabasesAccess().getValuesAssignment_2(), "rule__Databases__ValuesAssignment_2");
			builder.put(grammarAccess.getSystemAccess().getNameAssignment_2(), "rule__System__NameAssignment_2");
			builder.put(grammarAccess.getDescriptionAccess().getNameAssignment_2(), "rule__Description__NameAssignment_2");
			builder.put(grammarAccess.getDefinitionAccess().getOptionsAAssignment_3(), "rule__Definition__OptionsAAssignment_3");
			builder.put(grammarAccess.getDefinitionAccess().getOptionsAAssignment_4_1(), "rule__Definition__OptionsAAssignment_4_1");
			builder.put(grammarAccess.getDefinitionAccess().getPropertyAssignment_7(), "rule__Definition__PropertyAssignment_7");
			builder.put(grammarAccess.getDefinitionAccess().getOptionsBAssignment_8_2(), "rule__Definition__OptionsBAssignment_8_2");
			builder.put(grammarAccess.getDefinitionAccess().getOptionsBAssignment_8_3_1(), "rule__Definition__OptionsBAssignment_8_3_1");
			builder.put(grammarAccess.getConstructsAccess().getElementsAssignment_3(), "rule__Constructs__ElementsAssignment_3");
			builder.put(grammarAccess.getConstructsAccess().getElementsAssignment_4_1(), "rule__Constructs__ElementsAssignment_4_1");
			builder.put(grammarAccess.getOptionAccess().getNameAssignment(), "rule__Option__NameAssignment");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
